from keras.layers import Conv2D, Flatten, Dropout, LeakyReLU, Dense
from keras.models import Sequential
from keras.optimizers import Adam


class Discriminator:
    """Class that defines the discriminator of a Generative Adversarial Network (GAN).

    This class represents the discriminator of a GAN, which is responsible for
    discriminating between real images and those generated by the generator.

    Attributes:
        input_shape (tuple): Shape of the input images to the discriminator.
        model (keras.models.Sequential): Model of the discriminator.
    """

    def __init__(self, input_shape):
        """Initializes the discriminator with the specified input shape.

        Args:
            input_shape (tuple): Shape of the input images to the
            discriminator.
        """
        self.input_shape = input_shape
        self.model = self.build_model()

    def build_model(self):
        """Builds and compiles the model of the discriminator.

        Returns:
            keras.models.Sequential: Model of the discriminator.
        """
        model = Sequential()

        # Convolutional layer
        model.add(Conv2D(64, kernel_size=3, padding="same"))
        model.add(LeakyReLU(alpha=0.2))

        # Convolutional layer
        model.add(Conv2D(128, kernel_size=3, strides=2, padding="same"))
        model.add(LeakyReLU(alpha=0.2))

        # Convolutional layer
        model.add(Conv2D(128, kernel_size=3, strides=2, padding="same"))
        model.add(LeakyReLU(alpha=0.2))

        # Convolutional layer
        model.add(Conv2D(256, kernel_size=3, strides=2, padding="same"))
        model.add(LeakyReLU(alpha=0.2))

        # Flattening layer
        model.add(Flatten())

        # Dropout layer
        model.add(Dropout(0.4))

        # Dense layer
        model.add(Dense(1, activation="sigmoid"))

        # Optimizer
        optimizer = Adam(learning_rate=0.0002, beta_1=0.5)

        # Compile the model
        model.compile(
            loss="binary_crossentropy", optimizer=optimizer, metrics=["accuracy"]
        )

        return model

    def summary(self):
        """Prints a summary of the discriminator model."""
        return self.model.summary()

    def evaluate(self, x, y):
        """Evaluates the discriminator model on a set of input data and labels.

        Args:
            x (numpy.ndarray): Input data set.
            y (numpy.ndarray): True labels corresponding to the input data.

        Returns:
            list: List containing the loss and accuracy of the model on the
              input data set.
        """
        return self.model.evaluate(x, y)

    def trainable(self, trainable):
        """Sets whether the discriminator model is trainable or not.

        Args:
            trainable (bool): Indicates whether the discriminator model is
            trainable or not.
        """
        self.model.trainable = trainable
